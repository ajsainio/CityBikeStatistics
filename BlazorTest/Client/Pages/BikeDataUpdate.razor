@page "/bikedataupdate"
@using BlazorTest.Shared
@using BlazorTest.Client.Enums
@inject HttpClient Http

<h1>Bike data update</h1>
<EditForm Model="@_downloadContract" OnValidSubmit="@StartBikeDataUpdate">
  <DataAnnotationsValidator />
  <ValidationSummary />
  <div>
    <label for="months">Select month:</label>
    <select required id="months" @bind="_downloadContract.Month" disabled="@_isDownloading">
      @for (var date = DateTime.MinValue; date < DateTime.MinValue.AddYears(1); date = date.AddMonths(1))
      {
        <option value="@date.Month">@date.ToString("MMMM")</option>
      }
    </select>
  </div>

  <div>
    <label for="year">Type year:</label>
    <input required id="year" type="number" pattern="\d{4,4}" @bind-value="_downloadContract.Year" disabled="@_isDownloading"/>
  </div>

  @if (_isDownloading)
  {
    <p><em>Downloading bike data...</em></p>
  }
  else
  {
    <button type="submit" class="btn btn-primary">Update City Bike Data</button>
  }
</EditForm>

  @if (_downloadStatus == BikeDataDownloadStatus.FileFound) {
    <p><em>File downloaded and sent to handling</em></p>
  }

  @if (_downloadStatus == BikeDataDownloadStatus.FileNotFound) {
    <p><em>File for given time period was not found</em></p>
  }

  @code {

    private readonly BikeDataDownloadContract _downloadContract = new BikeDataDownloadContract();

    private bool _isDownloading;
    private BikeDataDownloadStatus _downloadStatus;

    private async Task StartBikeDataUpdate() {
      _downloadStatus = BikeDataDownloadStatus.DownloadNotStarted;
      _isDownloading = true;
      var response = await Http.PostAsJsonAsync("CityBikeDataDownload", _downloadContract);
      _isDownloading = false;
      _downloadStatus = response.IsSuccessStatusCode ? BikeDataDownloadStatus.FileFound : BikeDataDownloadStatus.FileNotFound;
    }

  }
